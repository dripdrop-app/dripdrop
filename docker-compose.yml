version: '2.4'
name: dripdrop
services:
  server:
    platform: linux/amd64
    container_name: server
    restart: always
    volumes:
      - type: volume
        source: server-logs
        target: /src/logs
      - type: bind
        source: ../build
        target: /src/build
    env_file: .env
    build:
      dockerfile: dockerfiles/Dockerfile
    entrypoint: |
      bash -c "
        set -e
        source venv/bin/activate
        alembic upgrade head
        gunicorn dripdrop.app:app -w 2 -k uvicorn.workers.UvicornWorker -b :$SERVER_PORT -c ./config/gunicorn.py
      "
    logging:
      driver: 'json-file'
      options:
        max-size: '10m'
        max-file: '10'
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - $SERVER_PORT:$SERVER_PORT
  worker:
    platform: linux/amd64
    container_name: worker
    restart: always
    volumes:
      - type: volume
        source: worker-logs
        target: /src/logs
    env_file: .env
    build:
      dockerfile: dockerfiles/Dockerfile.worker
    entrypoint: supervisord -c ./config/worker.supervisord.conf
    logging:
      driver: 'json-file'
      options:
        max-size: '10m'
        max-file: '10'
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
  postgres:
    image: postgres:14
    container_name: postgres
    restart: always
    healthcheck:
      test: pg_isready -U dripdrop
      interval: 10s
      start_period: 1s
      timeout: 1m30s
    volumes:
      - type: volume
        source: postgresql
        target: /var/lib/postgresql/data
    env_file: .env
    environment:
      POSTGRES_USER: $DATABASE_USER
      POSTGRES_PASSWORD: $DATABASE_PASSWORD
      POSTGRES_DB: $DATABASE
      POSTGRES_HOST_AUTH_METHOD: md5
    logging:
      driver: 'json-file'
      options:
        max-size: '10m'
        max-file: '10'
  redis:
    image: redis
    container_name: redis
    restart: always
    healthcheck:
      test: redis-cli ping
      interval: 10s
      start_period: 1s
      timeout: 1m30s
    volumes:
      - type: volume
        source: redis
        target: /data
    env_file: '.env'
    environment:
      REDIS_ARGS: --save 20 1
    logging:
      driver: 'json-file'
      options:
        max-size: '10m'
        max-file: '10'
  logs:
    image: python:3.10
    container_name: logs
    restart: always
    working_dir: /home/logs
    volumes:
      - type: volume
        source: server-logs
        target: /home/logs/server
        read_only: true
      - type: volume
        source: worker-logs
        target: /home/logs/worker
        read_only: true
    entrypoint: tail -f /dev/null
    logging:
      driver: 'json-file'
      options:
        max-size: '10m'
        max-file: '10'

volumes:
  server-logs:
  worker-logs:
  postgresql:
  redis:
