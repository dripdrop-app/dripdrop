version: '2.4'
name: dripdrop
services:
  server:
    platform: linux/amd64
    container_name: server
    restart: always
    volumes:
      - type: bind
        source: ./
        target: /src
    build:
      dockerfile: dockerfiles/Dockerfile.dev
    entrypoint: |
        bash -c "
          set -e
          source .venv/bin/activate
          alembic upgrade head
          uvicorn dripdrop.app:app --reload --reload-dir dripdrop --host 0.0.0.0 --port $SERVER_PORT
        "
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - $SERVER_PORT:$SERVER_PORT
  worker:
    platform: linux/amd64
    container_name: worker
    restart: always
    volumes:
      - type: bind
        source: ./
        target: /src 
    build:
      dockerfile: dockerfiles/Dockerfile.dev
    entrypoint: |
      bash -c "
        set -e
        source .venv/bin/activate
        watchfiles 'python worker.py' ./worker.py
      "
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
  postgres:
    image: postgres:14
    container_name: postgres
    restart: always
    healthcheck:
      test: pg_isready -U dripdrop
      interval: 10s
      start_period: 1s
      timeout: 1m30s
    volumes:
      - type: volume
        source: postgresql
        target: /var/lib/postgresql/data
    environment:
      POSTGRES_USER: $DATABASE_USER
      POSTGRES_PASSWORD: $DATABASE_PASSWORD
      POSTGRES_DB: $DATABASE
      POSTGRES_HOST_AUTH_METHOD: md5
  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin
    restart: always
    environment:
      PGADMIN_DEFAULT_EMAIL: dripdrop@gmail.com
      PGADMIN_DEFAULT_PASSWORD: dripdrop
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - "8000:80"
  redis:
    image: redis
    container_name: redis
    restart: always
    healthcheck:
      test: redis-cli ping
      interval: 10s
      start_period: 1s
      timeout: 1m30s
    volumes:
      - type: volume
        source: redis
        target: /data

volumes:
  postgresql:
  redis:
