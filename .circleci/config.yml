version: 2.1

commands:
  export_variable_to_env_file:
    parameters:
      variable_name:
        type: string
      value:
        type: string
    steps:
      - run:
          name: Export << parameters.variable_name >> to env file 
          command: |
            [ -f .env ] || touch .env
            echo "<< parameters.variable_name >>=<< parameters.value >>" >> .env

  install_packages:
    steps:
      - run:
          name: Install packages and dependencies
          command: |
            apt-get -y update
            apt-get -y upgrade
            apt-get install -y ffmpeg
            apt-get install -y redis
            python -m venv venv
            source venv/bin/activate
            pip install poetry
            poetry export -f requirements.txt --output requirements.txt
            pip install -r requirements.txt

  export_environment:
    parameters:
      test:
        type: boolean
        default: false
    steps:
      - export_variable_to_env_file:
          variable_name: API_KEY
          value: $API_KEY
      - export_variable_to_env_file:
          variable_name: AWS_REGION_NAME
          value: $AWS_REGION_NAME
      - export_variable_to_env_file:
          variable_name: AWS_S3_ARTWORK_BUCKET
          value: $AWS_S3_ARTWORK_BUCKET
      - export_variable_to_env_file:
          variable_name: AWS_S3_MUSIC_BUCKET
          value: $AWS_S3_MUSIC_BUCKET
      - export_variable_to_env_file:
          variable_name: GOOGLE_API_KEY
          value: $GOOGLE_API_KEY
      - export_variable_to_env_file:
          variable_name: GOOGLE_CLIENT_ID
          value: $GOOGLE_CLIENT_ID    
      - export_variable_to_env_file:
          variable_name: GOOGLE_CLIENT_SECRET
          value: $GOOGLE_CLIENT_SECRET
      - export_variable_to_env_file:
          variable_name: POSTGRES_DB
          value: $POSTGRES_DB
      - export_variable_to_env_file:
          variable_name: POSTGRES_HOST
          value: $POSTGRES_HOST
      - export_variable_to_env_file:
          variable_name: POSTGRES_PASSWORD
          value: $POSTGRES_PASSWORD
      - export_variable_to_env_file:
          variable_name: POSTGRES_HOST
          value: $POSTGRES_HOST
      - export_variable_to_env_file:
          variable_name: SECRET_KEY
          value: $SECRET_KEY
      - export_variable_to_env_file:
          variable_name: SERVER_PORT
          value: $SERVER_PORT
      - when:
          condition: << parameters.test >>
          steps:
            - export_variable_to_env_file:
                variable_name: ENV
                value: testing
            - export_variable_to_env_file:
                variable_name: AWS_ACCESS_KEY_ID
                value: $TEST_AWS_ACCESS_KEY_ID
            - export_variable_to_env_file:
                variable_name: AWS_ENDPOINT_URL
                value: $TEST_AWS_ENDPOINT_URL
            - export_variable_to_env_file:
                variable_name: AWS_SECRET_ACCESS_KEY
                value: $TEST_AWS_SECRET_ACCESS_KEY
            - export_variable_to_env_file:
                variable_name: REDIS_URL
                value: $TEST_REDIS_URL
      - when:
          condition:
            not: << parameters.test >>
          steps:
            - export_variable_to_env_file:
                variable_name: ENV
                value: $ENV
            - export_variable_to_env_file:
                variable_name: AWS_ACCESS_KEY_ID
                value: $AWS_ACCESS_KEY_ID
            - export_variable_to_env_file:
                variable_name: AWS_ENDPOINT_URL
                value: $AWS_ENDPOINT_URL
            - export_variable_to_env_file:
                variable_name: AWS_SECRET_ACCESS_KEY
                value: $AWS_SECRET_ACCESS_KEY
            - export_variable_to_env_file:
                variable_name: REDIS_URL
                value: $REDIS_URL

jobs:
  build and test:
    docker:
      - image: python:3.10
    steps:
      - checkout
      - install_packages
      - export_environment:
          test: true
      - run:
          name: Run Tests
          command: |
            source venv/bin/activate
            pytest -s

  deploy:
    docker:
      - image: python:3.10
    steps:
      - checkout
      - export_environment
      - run:
          name: Install rsync
          command: |
            apt-get -y update
            apt-get install -y rsync
      - run:
          name: Backup container data
          command: |
            ssh -o StrictHostKeyChecking=no -v $SSH_USER@$SSH_HOST "
              set -e
              [ -d ~/data ] || mkdir ~/data
              docker cp server:/src/logs ~/data/server
              docker cp worker:/src/logs ~/data/worker
              docker cp redis:/data ~/data/redis
              docker cp postgres:/var/lib/postgresql/data ~/data/postgresql
              [ -d ~/data/backup ] || mkdir ~/data/backup
              docker exec postgres pg_dump -U dripdrop dripdrop > ~/data/backup/db.sql
            "
      - run:
          name: Sync repo to VM
          command: rsync -arzP -e 'ssh -o StrictHostKeyChecking=no' $(pwd)/ $SSH_USER@$SSH_HOST:~/dripdrop --exclude=data
      - run:
          name: Deploy Over SSH
          command: |
            ssh -o StrictHostKeyChecking=no -v $SSH_USER@$SSH_HOST "
              set -e
              cd ~/dripdrop
              docker compose -f docker-compose.yml build --progress plain server
              docker compose -f docker-compose.yml up --no-deps -d server
            "

workflows:
  version: 2
  deploy:
    jobs:
      - build and test
      - deploy:
          requires:
            - build and test
          filters:
            branches:
              only: main # only deploy on the main branch
