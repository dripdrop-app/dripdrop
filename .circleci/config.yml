version: 2.1

commands:
  install_packages:
    steps:
      - run:
          name: Install packages and dependencies
          command: |
            apt-get -y update
            apt-get -y upgrade
            apt-get install -y ffmpeg
            python -m venv venv
            source venv/bin/activate
            pip install poetry
            poetry export -f requirements.txt --output requirements.txt
            pip install -r requirements.txt

  export_environment_to_file:
    steps:
      - run:
          name: Export environment variables
          command: |
            touch .env
            echo "ASYNC_DATABASE_URL=$ASYNC_DATABASE_URL" >> .env
            echo "AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID" >> .env
            echo "AWS_ENDPOINT_URL=$AWS_ENDPOINT_URL" >> .env
            echo "AWS_REGION_NAME=$AWS_REGION_NAME" >> .env
            echo "AWS_S3_ARTWORK_FOLDER=$AWS_S3_ARTWORK_FOLDER" >> .env
            echo "AWS_S3_BUCKET=$AWS_S3_BUCKET" >> .env
            echo "AWS_S3_MUSIC_FOLDER=$AWS_S3_MUSIC_FOLDER" >> .env
            echo "AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY" >> .env
            echo "DATABASE=$DATABASE" >> .env
            echo "DATABASE_PASSWORD=$DATABASE_PASSWORD" >> .env
            echo "DATABASE_URL=$DATABASE_URL" >> .env
            echo "DATABASE_USER=$DATABASE_USER" >> .env
            echo "ENV=$ENV" >> .env
            echo "GOOGLE_API_KEY=$GOOGLE_API_KEY" >> .env
            echo "GOOGLE_CLIENT_ID=$GOOGLE_CLIENT_ID" >> .env
            echo "GOOGLE_CLIENT_SECRET=$GOOGLE_CLIENT_SECRET" >> .env
            echo "REDIS_URL=$REDIS_URL" >> .env
            echo "SECRET_KEY=$SECRET_KEY" >> .env
            echo "SERVER_PORT=$SERVER_PORT" >> .env
            echo "TEST_ASYNC_DATABASE_URL=$TEST_ASYNC_DATABASE_URL" >> .env
            echo "TEST_AWS_ACCESS_KEY_ID=$TEST_AWS_ACCESS_KEY_ID" >> .env
            echo "TEST_AWS_S3_BUCKET=$TEST_AWS_S3_BUCKET" >> .env
            echo "TEST_AWS_SECRET_ACCESS_KEY=$TEST_AWS_SECRET_ACCESS_KEY" >> .env
            echo "TEST_DATABASE_URL=$TEST_DATABASE_URL" >> .env
            echo "TEST_REDIS_URL=$TEST_REDIS_URL" >> .env

jobs:
  build and test:
    docker:
      - image: python:3.10
      - image: redis
      - image: postgres:14
        environment:
          POSTGRES_PASSWORD: $DATABASE_PASSWORD
          POSTGRES_HOST_AUTH_METHOD: trust
    steps:
      - checkout
      - install_packages
      - run:
          name: Run Tests
          command: |
            source venv/bin/activate
            pytest
          environment:
            ENV: testing

  deploy:
    docker:
      - image: python:3.10
    steps:
      - checkout
      - run:
          name: Install rsync
          command: |
            apt-get -y update
            apt-get install -y rsync
      - run:
          name: Backup container data
          command: |
            ssh -o StrictHostKeyChecking=no -v $SSH_USER@$SSH_HOST "
              set -e
              [ -d ~/data ] || mkdir ~/data
              docker cp server:/src/logs ~/data/server
              docker cp worker:/src/logs ~/data/worker
              docker cp redis:/data ~/data/redis
              docker cp postgres:/var/lib/postgresql/data ~/data/postgresql
              [ -d ~/data/backup ] || mkdir ~/data/backup
              docker exec postgres pg_dump -U dripdrop dripdrop > ~/data/backup/db.sql
            "
      - export_environment_to_file
      - run:
          name: Sync repo to VM
          command: rsync --verbose --recursive -e 'ssh -o StrictHostKeyChecking=no' $(pwd)/ $SSH_USER@$SSH_HOST:~/dripdrop --exclude=data
      - run:
          name: Deploy Over SSH
          command: |
            ssh -o StrictHostKeyChecking=no -v $SSH_USER@$SSH_HOST "
              set -e
              cd ~/dripdrop
              docker compose -f docker-compose.yml build --progress plain server worker
              docker compose -f docker-compose.yml up --no-deps -d server worker
            "

workflows:
  version: 2
  deploy:
    jobs:
      - build and test
      - deploy:
          requires:
            - build and test
          filters:
            branches:
              only: main # only deploy on the main branch
