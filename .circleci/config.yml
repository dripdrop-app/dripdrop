version: 2.1

commands:
  install_packages:
    steps:
      - run:
          name: Install packages and dependencies
          command: |
            apt-get -y update
            apt-get -y upgrade
            apt-get install -y ffmpeg
            pip install poetry
            poetry export -f requirements.txt --output requirements.txt
            pip install -r requirements.txt

  export_environment:
    parameters:
      env:
        type: enum
        default: production
        enum: [production, testing]  
    steps:
      - run:
          name: Export environment variables
          command: |
            touch .env
            echo -e "API_KEY=$API_KEY\n" >> .env
            echo -e "AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID\n" >> .env
            echo -e "AWS_ENDPOINT_URL=$AWS_ENDPOINT_URL\n" >> .env
            echo -e "AWS_REGION_NAME=$AWS_REGION_NAME\n" >> .env
            echo -e "AWS_S3_ARTWORK_BUCKET=$AWS_S3_ARTWORK_BUCKET\n" >> .env
            echo -e "AWS_S3_MUSIC_BUCKET=$AWS_S3_MUSIC_BUCKET\n" >> .env
            echo -e "AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY\n" >> .env
            echo -e "ENV=<< parameters.env >>\n" >> .env
            echo -e "GOOGLE_API_KEY=$GOOGLE_API_KEY\n" >> .env
            echo -e "GOOGLE_CLIENT_ID=$GOOGLE_CLIENT_ID\n" >> .env
            echo -e "GOOGLE_CLIENT_SECRET=$GOOGLE_CLIENT_SECRET\n" >> .env
            echo -e "MIGRATION_DATABASE_URL=$MIGRATION_DATABASE_URL\n" >> .env
            echo -e "POSTGRES_DB=$POSTGRES_DB\n" >> .env
            echo -e "POSTGRES_HOST=$POSTGRES_HOST\n" >> .env
            echo -e "POSTGRES_PASSWORD=$POSTGRES_PASSWORD\n" >> .env
            echo -e "POSTGRES_USER=$POSTGRES_USER\n" >> .env
            echo -e "REDIS_URL=$REDIS_URL\n" >> .env
            echo -e "SECRET_KEY=$SECRET_KEY\n" >> .env
            echo -e "SERVER_PORT=$SERVER_PORT\n" >> .env

jobs:
  build and test:
    docker:
      - image: python:3.10
    steps:
      - checkout
      - install_packages
      - export_environment:
          env: testing
      - run:
          name: Run Tests
          command: pytest -s

  deploy:
    docker:
      - image: python:3.10
    steps:
      - checkout
      - export_environment
      - run:
          name: Copy repo to VM
          command: scp -o StrictHostKeyChecking=no -vr $(pwd) $SSH_USER@$SSH_HOST:~/dripdrop-new
      - run:
          name: Update repo on VM
          command: |
            ssh -o StrictHostKeyChecking=no -v $SSH_USER@$SSH_HOST "
              cp -r ~/dripdrop-new/* ~/dripdrop/
              rm -rf ~/dripdrop-new
            "
      - run:
          name: Deploy Over SSH
          command: |
            ssh -o StrictHostKeyChecking=no -v $SSH_USER@$SSH_HOST "
              set -e
              \cp -r ~/build ~/dripdrop
              cd ~/dripdrop
              docker compose -f docker-compose.yml build --progress plain server
              docker compose -f docker-compose.yml up --no-deps -d server
            "
            
workflows:
  version: 2
  deploy:
    jobs:
      - build and test
      - deploy:
          requires:
            - build and test
          filters:
            branches:
              only: main # only deploy on the main branch
