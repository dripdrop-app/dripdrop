version: '2.4'
name: dripdrop-base
services:
  server:
    platform: linux/amd64
    container_name: server
    restart: always
    entrypoint: ./scripts/server.sh
    environment:
      SERVER_PORT: $SERVER_PORT
    ports:
      - $SERVER_PORT:$SERVER_PORT
    healthcheck:
      test: "curl -f http://localhost:$SERVER_PORT/api/docs"
      interval: 30s

  worker:
    platform: linux/amd64
    restart: always
    build:
      dockerfile: dockerfiles/Dockerfile.dev
    entrypoint: ./scripts/worker.sh
    environment:
      REDIS_URL: $REDIS_URL

  postgres:
    image: postgres:14
    container_name: postgres
    restart: always
    environment:
      POSTGRES_USER: $DATABASE_USER
      POSTGRES_PASSWORD: $DATABASE_PASSWORD
      POSTGRES_DB: $DATABASE
      POSTGRES_HOST_AUTH_METHOD: md5
    volumes:
      - type: volume
        source: postgresql
        target: /var/lib/postgresql/data
    healthcheck:
      test: pg_isready -U $DATABASE
      interval: 10s

  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin
    restart: always
    environment:
      PGADMIN_DEFAULT_EMAIL: $DATABASE_USER@$DATABASE.com
      PGADMIN_DEFAULT_PASSWORD: $DATABASE_PASSWORD
    ports:
      - 5050:80
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: "wget -O - http://localhost"
      interval: 30s

  redis:
    image: redis
    container_name: redis
    restart: always
    volumes:
      - type: volume
        source: redis
        target: /data
    healthcheck:
      test: redis-cli ping
      interval: 10s

  influxdb:
    image: influxdb
    container_name: influxdb
    restart: always
    environment:
      DOCKER_INFLUXDB_INIT_MODE: setup
      DOCKER_INFLUXDB_INIT_USERNAME: $INFLUXDB_USERNAME
      DOCKER_INFLUXDB_INIT_PASSWORD: $INFLUXDB_PASSWORD
      DOCKER_INFLUXDB_INIT_ORG: $INFLUXDB_ORG
      DOCKER_INFLUXDB_INIT_BUCKET: $INFLUXDB_BUCKET
      DOCKER_INFLUXDB_INIT_ADMIN_TOKEN: $INFLUXDB_TOKEN
      DOCKER_INFLUXDB_INIT_RETENTION: 30d
    volumes:
      - type: volume
        source: influxdb
        target: /var/lib/influxdb
    ports:
      - 8086:8086
    healthcheck:
      test: "curl -f http://localhost:8086/ping"
      interval: 10s

  telegraf:
    image: telegraf
    container_name: telegraf
    restart: always
    environment:
      HOST_MOUNT_PREFIX: /hostfs
      HOST_PROC: /hostfs/proc
      INFLUXDB_USERNAME: $INFLUXDB_USERNAME
      INFLUXDB_PASSWORD: $INFLUXDB_PASSWORD
      INFLUXDB_ORG: $INFLUXDB_ORG
      INFLUXDB_BUCKET: $INFLUXDB_BUCKET
      INFLUXDB_TOKEN: $INFLUXDB_TOKEN
      INFLUXDB_URL: $INFLUXDB_URL
      TELEGRAF_SYSLOG_ADDRESS: $TELEGRAF_SYSLOG_ADDRESS
      TELEGRAF_SYSLOG_PORT: $TELEGRAF_SYSLOG_PORT
    volumes:
      - type: bind
        source: ./config/telegraf.conf
        target: /etc/telegraf/telegraf.conf
        read_only: true
      - type: bind
        source: /var/run/docker.sock
        target: /var/run/docker.sock
        read_only: true
      - type: bind
        source: /proc
        target: /hostfs/proc
        read_only: true
    ports:
      - 6514:6514/udp
    healthcheck:
      test: "curl -f http://localhost:8080"
      interval: 10s

  grafana:
    image: grafana/grafana-oss
    container_name: grafana
    restart: always
    environment:
      GF_SECURITY_ADMIN_USER: $INFLUXDB_USERNAME
      GF_SECURITY_ADMIN_PASSWORD: $INFLUXDB_PASSWORD
      INFLUXDB_ORG: $INFLUXDB_ORG
      INFLUXDB_BUCKET: $INFLUXDB_BUCKET
      INFLUXDB_TOKEN: $INFLUXDB_TOKEN
      INFLUXDB_URL: $INFLUXDB_URL
    volumes:
      - type: bind
        source: ./config/provisioning
        target: /etc/grafana/provisioning
      - type: bind
        source: ./config/dashboards
        target: /var/lib/grafana/dashboards
    ports:
      - 8888:3000
    healthcheck:
      test: "wget -O - http://localhost:3000/api/health"
      interval: 10s
