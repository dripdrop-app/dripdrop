x-logging: &logging
  logging:
    driver: 'local'
    options:
      max-size: '10m'
      max-file: '5'

x-depends-database: &depends-database
  postgres:
    condition: service_healthy

x-depends-redis: &depends-redis
  redis:
    condition: service_healthy

x-depends-all: &depends-all
  depends_on:
    <<:
      - *depends-database
      - *depends-redis

version: '2.4'
services:
  server:
    image: ${IMAGE}
    command: ["./scripts/server.sh"]
    restart: on-failure:5
    ports:
      - 5000:5000
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/healthcheck"]
      interval: 30s
    environment:
      ENV: ${ENV}
    volumes: 
      - type: volume
        source: temp_volume
        target: /src/temp
    <<: 
      - *depends-all
      - *logging

  worker:
    image: ${IMAGE}
    command: ["./scripts/worker.sh"]
    restart: on-failure:5
    environment:
      ENV: ${ENV}
      REDIS_URL: ${REDIS_URL}
    volumes: 
      - type: volume
        source: temp_volume
        target: /src/temp
    <<: 
      - *depends-all
      - *logging

  postgres:
    image: postgres:14
    restart: always
    environment:
      POSTGRES_USER: ${DATABASE_USER}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
      POSTGRES_DB: ${DATABASE}
      POSTGRES_HOST_AUTH_METHOD: md5
    volumes:
      - type: volume
        source: postgres_volume
        target: /var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${DATABASE}"]
      interval: 10s
    <<: *logging

  pgadmin:
    image: dpage/pgadmin4
    restart: always
    environment:
      PGADMIN_DEFAULT_EMAIL: ${DATABASE_USER}@${DATABASE}.com
      PGADMIN_DEFAULT_PASSWORD: ${DATABASE_PASSWORD}
    ports:
      - 5050:80
    healthcheck:
      test: ["CMD", "wget", "-O", "-", "http://localhost/misc/ping"]
      interval: 30s
    depends_on:
      <<: *depends-database
    <<: *logging

  redis:
    image: redis
    volumes:
      - type: volume
        source: redis_volume
        target: /data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
    <<: *logging

  influxdb:
    image: influxdb
    environment:
      DOCKER_INFLUXDB_INIT_MODE: setup
      DOCKER_INFLUXDB_INIT_USERNAME: ${INFLUXDB_USERNAME}
      DOCKER_INFLUXDB_INIT_PASSWORD: ${INFLUXDB_PASSWORD}
      DOCKER_INFLUXDB_INIT_ORG: ${INFLUXDB_ORG}
      DOCKER_INFLUXDB_INIT_BUCKET: ${INFLUXDB_BUCKET}
      DOCKER_INFLUXDB_INIT_ADMIN_TOKEN: ${INFLUXDB_TOKEN}
      DOCKER_INFLUXDB_INIT_RETENTION: 14d
    volumes:
      - type: volume
        source: influxdb_volume
        target: /var/lib/influxdb
    ports:
      - 8086:8086
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8086/ping"]
      interval: 10s
    <<: *logging

  telegraf:
    image: telegraf
    environment:
      HOST_MOUNT_PREFIX: /hostfs
      HOST_PROC: /hostfs/proc
      INFLUXDB_USERNAME: ${INFLUXDB_USERNAME}
      INFLUXDB_PASSWORD: ${INFLUXDB_PASSWORD}
      INFLUXDB_ORG: ${INFLUXDB_ORG}
      INFLUXDB_BUCKET: ${INFLUXDB_BUCKET}
      INFLUXDB_TOKEN: ${INFLUXDB_TOKEN}
      INFLUXDB_URL: ${INFLUXDB_URL}
    volumes:
      - type: bind
        source: ./config/telegraf.conf
        target: /etc/telegraf/telegraf.conf
        read_only: true
      - type: bind
        source: /var/run/docker.sock
        target: /var/run/docker.sock
        read_only: true
      - type: bind
        source: /proc
        target: /hostfs/proc
        read_only: true
    ports:
      - 6514:6514
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080"]
      interval: 10s
    <<: *logging

  grafana:
    image: grafana/grafana-oss
    environment:
      GF_SECURITY_ADMIN_USER: ${INFLUXDB_USERNAME}
      GF_SECURITY_ADMIN_PASSWORD: ${INFLUXDB_PASSWORD}
      INFLUXDB_ORG: ${INFLUXDB_ORG}
      INFLUXDB_BUCKET: ${INFLUXDB_BUCKET}
      INFLUXDB_TOKEN: ${INFLUXDB_TOKEN}
      INFLUXDB_URL: ${INFLUXDB_URL}
    volumes:
      - type: bind
        source: ./config/provisioning
        target: /etc/grafana/provisioning
        read_only: true
      - type: bind
        source: ./config/dashboards
        target: /var/lib/grafana/dashboards
        read_only: true
    ports:
      - 8888:3000
    healthcheck:
      test: ["CMD", "wget", "-O", "-", "http://localhost:3000/api/health"]
      interval: 10s
    <<: *logging
